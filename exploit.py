from selenium import webdriver
import time
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By


# Uzeyir Alirzayev â€“ Function to scrape Exploit DB for aviable exploits about CVE_ID
def exploit_scraper(cveId):
    """Scraper function for scrape exploits about given CVE ID

    Args:
        cveId (str): CVE ID as string

    Returns:
        list: List of dictionaries which each dictionary represents a row of data
    """    
    # Setup ChromeDriver with webdriver_manager
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Run in headless mode (remove if you want to see the browser window)
    driver = webdriver.Chrome(options=chrome_options)

    # Open the target URL
    driver.get(f'https://www.exploit-db.com/search?cve={cveId}')  # Replace with the actual URL
    time.sleep(3)

    # Locate the table
    table = driver.find_element(By.ID, 'exploits-table')

    no_data_message = table.find_element(By.TAG_NAME, 'tbody').find_elements(By.TAG_NAME, 'tr')[0].find_elements(By.TAG_NAME, 'td')[0]
    if "No data available in table" in no_data_message.text:
        # Return a list with a single string "N/A"
        print(["N/A"])
        driver.quit()
        return ["N/A"]

    # Get table headers
    headers = [header.text for header in table.find_element(By.TAG_NAME, 'thead').find_elements(By.TAG_NAME, 'th')]
    # Get table rows
    rows = table.find_element(By.TAG_NAME, 'tbody').find_elements(By.TAG_NAME, 'tr')

    # Initialize the list to store row data
    data = []

    for row in rows:
        cells = row.find_elements(By.TAG_NAME, 'td')
        row_data = {}

        for i, cell in enumerate(cells):
            header = headers[i]
            if header == 'V':  # Handle special case for 'V' field
                # Check if the cell contains the specific CSS element for YES
                if cell.find_element(By.TAG_NAME, 'i').get_attribute('class') == 'mdi mdi-check mdi-18px':
                    row_data[header] = 'YES'
                else:
                    row_data[header] = 'NO'
            elif header == 'D':  # Handle special case for 'D' field
                # Find the <a> tag and extract the href attribute
                link = cell.find_element(By.TAG_NAME, 'a')
                row_data[header] = link.get_attribute('href')
            elif header == 'Title':  # Handle special case for 'Title' field
                # Extract the text for the Title field
                title_element = cell.find_element(By.TAG_NAME, 'a')
                title_text = title_element.text
                title_link = title_element.get_attribute('href')

                # Store the text normally and add link to the "A" field
                row_data['Title'] = title_text
                row_data['A'] = title_link
            else:
                row_data[header] = cell.text

        data.append(row_data)

    # Close the browser
    driver.quit()
    return data